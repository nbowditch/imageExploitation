define(['ractive', 'rv!comparitor/comparitor'],
    function(Ractive, template) {
        return {
            /**
             * The data bound to the view.
             * @type {Object}
             */
            data: {
                imageOneData: '',
                imageTwoData: '',
                fileOneUpdated: null,
                fileTwoUpdated: null,
                rDiff: '-',
                gDiff: '-',
                bDiff: '-',
                avgDiff: '-'
            },

            /**
             * Initializes the Ractive instance and renders it to the DOM.
             * @param  {Element} parentElement The parent element
             */
            initialize: function(parentElement) {
                this._ractive = new Ractive({
                    append: true,
                    data: this.data,
                    el: parentElement,
                    template: template
                });

                this._ractive.observe('fileOneUpdated', this._uploadedImageOne.bind(this));
                this._ractive.observe('fileTwoUpdated', this._uploadedImageTwo.bind(this));

                this._imageOne = this._ractive.find('#image-one');
                this._imageTwo = this._ractive.find('#image-two');
            },

            /**
             * @private
             */
            _compareImages: function() {
                var canvasOne = document.createElement('canvas');
                var contextOne = canvasOne.getContext('2d');

                canvasOne.width = this._imageOne.width;
                canvasOne.height = this._imageOne.height;

                var canvasTwo = document.createElement('canvas');
                var contextTwo = canvasTwo.getContext('2d');

                canvasTwo.width = this._imageTwo.width;
                canvasTwo.height = this._imageTwo.height;

                if (canvasOne.width != canvasTwo.width || canvasOne.height != canvasTwo.height) {
                    alert('The dimensions of the two images must match!');
                    return;
                }

                contextOne.drawImage(this._imageOne, 0, 0, canvasOne.width, canvasOne.height);
                contextTwo.drawImage(this._imageTwo, 0, 0, canvasTwo.width, canvasTwo.height);

                var imgDataOne = contextOne.getImageData(0, 0, canvasOne.width, canvasOne.height);
                var imgDataTwo = contextTwo.getImageData(0, 0, canvasTwo.width, canvasTwo.height);

                this._comparePixels(imgDataOne.data, imgDataTwo.data);
            },

            /**
             * @private
             */
            _comparePixels: function(imgDataA, imgDataB) {
                if (imgDataA.length != imgDataB.length) {
                    alert('The dimensions of the two images must match!');
                    return;
                }

                var numPixels = imgDataA.length / 4,
                    sumRed = 0,
                    sumGreen = 0,
                    sumBlue = 0,
                    sumAvg = 0;

                for (var i = 0, n = imgDataA.length; i < n; i += 4) {
                    var rA = imgDataA[i],
                        gA = imgDataA[i + 1],
                        bA = imgDataA[i + 2],
                        rB = imgDataB[i],
                        gB = imgDataB[i + 1],
                        bB = imgDataB[i + 2];

                    sumRed += Math.abs(rA - rB);
                    sumGreen += Math.abs(gA - gB);
                    sumBlue += Math.abs(bA - bB);
                    sumAvg += (Math.abs(rA - rB) + Math.abs(gA - gB) + Math.abs(bA - bB)) / 3;
                }

                this._ractive.set('rDiff', sumRed / numPixels);
                this._ractive.set('gDiff', sumGreen / numPixels);
                this._ractive.set('bDiff', sumBlue / numPixels);
                this._ractive.set('avgDiff', sumAvg / numPixels);
            },

            /**
             * Uploads the first image upon an input selection.
             * @param  {Array} files The file input event array containing the selected file(s)
             * @private
             */
            _uploadedImageOne: function(files) {
                if (!files || !files[0]) {
                    return;
                }

                this._uploadImage(files[0], 'imageOneData');
            },

            /**
             * Uploads the second image upon an input selection.
             * @param  {Array} files The file input event array containing the selected file(s)
             * @private
             */
            _uploadedImageTwo: function(files) {
                if (!files || !files[0]) {
                    return;
                }

                this._uploadImage(files[0], 'imageTwoData');
            },

            /**
             * Uploads the given image file and sets its data to the associated Ractive data property.
             * @param  {File}   file The image file to upload
             * @param  {String} prop The Ractive data property representing the source of the corresponding image element
             * @private
             */
            _uploadImage: function(file, prop) {
                var reader = new FileReader();

                reader.onload = function(e) {
                    this._ractive.set(prop, e.target.result);

                    if (this.data.imageOneData && this.data.imageTwoData) {
                        this._compareImages();
                    }
                }.bind(this);

                reader.readAsDataURL(file);
            }
        }
    }
);
