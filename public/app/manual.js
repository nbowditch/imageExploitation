define(['ractive', 'rv!manual/manual'],
    function(Ractive, template) {
        /**
         * The source image element
         * @type {Element}
         */
        var img = null;

        /**
         * The default values for filter inputs
         * @type {Object}
         */
        var FILTER_DEFAULTS = {
            BRIGHTNESS: 1,
            CONTRAST: 0,
            GRAYSCALE: false,
            HUE: 0,
            INVERT: false,
            SATURATE: 1
        };

        /**
         * Converts rgb color to hsl.
         * @param  {Integer} r The red value: [0, 1]
         * @param  {Integer} g The green value: [0, 1]
         * @param  {Integer} b The blue value: [0, 1]
         * @return {Object} Contains corresponding the hue, saturation, and lightness
         */
        var rgb2hsl = function(r, g, b) {
            var min = Math.min(r, g, b),
                max = Math.max(r, g, b);

            var h,
                s,
                l = (max + min) / 2;

            if (max === min) {
                h = 0;
                s = 0;
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }

                h /= 6;
            }

            return {
                h: h,
                s: s,
                l: l
            };
        };

        /**
         * Converts hsl color to rgb.
         * @param  {Object} hsl Contains the hsl values
         * @return {Object} Contains the rgb values
         */
        var hsl2rgb = function(hsl) {
            if (!hsl.s) {
                var grey = Math.floor(hsl.l * 255);
                return {
                    r: grey,
                    g: grey,
                    b: grey
                };
            }

            var a = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - (hsl.l * hsl.s);
            var b = (2 * hsl.l) - a;

            return {
                r: hue2color(hsl.h + (1 / 3), a, b),
                g: hue2color(hsl.h - (1 / 3), a, b),
                b: hue2color(hsl.h, a, b)
            };
        };

        /**
         * Converts a hue to a color.
         * @param  {Number} hue The hue: [0, 1]
         * @param  {Number} a
         * @param  {Number} b
         * @return {Integer} The representative color: [0, 255]
         */
        var hue2color = function(hue, a, b) {
            if (hue < 0) {
                hue += 1;
            }
            if (hue > 1) {
                hue -= 1;
            }

            var color;
            if (hue < 1 / 6) {
                color = b + (a - b) * 6 * hue;
            } else if (hue < 1 / 2) {
                color = a;
            } else if (hue < 2 / 3) {
                color = b + (a - b) * ((2 / 3) - hue) * 6;
            } else {
                color = b;
            }

            return Math.floor(color * 255);
        };

        /**
         * Applies the brightness filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         * @param  {Number} value The brightness multiplier
         */
        var adjustBrightness = function(pixels, value) {
            for (var i = 0, n = pixels.length; i < n; i += 4) {
                pixels[i] = Math.max(0, Math.min(255, pixels[i] * value));
                pixels[i + 1] = Math.max(0, Math.min(255, pixels[i + 1] * value));
                pixels[i + 2] = Math.max(0, Math.min(255, pixels[i + 2] * value));
            }
        };

        /**
         * Applies the contrast filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         * @param  {Number} value  The contrast multiplier
         */
        var adjustContrast = function(pixels, value) {
            var factor = (259 * (value + 255)) / (255 * (259 - value));

            for (var i = 0, n = pixels.length; i < n; i += 4) {
                pixels[i] = factor * (pixels[i] - 128) + 128;
                pixels[i + 1] = factor * (pixels[i + 1] - 128) + 128;
                pixels[i + 2] = factor * (pixels[i + 2] - 128) + 128;
            }
        };

        /**
         * Applies the hue filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         * @param  {Number} value  The hue multiplier
         */
        var adjustHue = function(pixels, value) {
            for (var i = 0, n = pixels.length; i < n; i += 4) {
                
                var red = pixels[i] / 255,
                    green = pixels[i + 1] / 255,
                    blue = pixels[i + 2] / 255;

                var hsl = rgb2hsl(red, blue, green);
                hsl.h += value;

                if (hsl.h > 1) {
                    hsl.h -= 1;
                }

                var rgb = hsl2rgb(hsl);

                pixels[i] = rgb.r;
                pixels[i + 1] = rgb.g;
                pixels[i + 2] = rgb.b;
            }
        };

        /**
         * Applies the grayscale filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         */
        var adjustGrayscale = function(pixels) {
            for (var i = 0, n = pixels.length; i < n; i += 4) {
                var gray = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;

                pixels[i] = gray;
                pixels[i + 1] = gray;
                pixels[i + 2] = gray;
            }
        };

        /**
         * Applies the invert filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         */
        var adjustInvert = function(pixels) {
            for (var i = 0, n = pixels.length; i < n; i += 4) {
                pixels[i] = 255 - pixels[i];
                pixels[i + 1] = 255 - pixels[i + 1];
                pixels[i + 2] = 255 - pixels[i + 2];
            }
        };

        /**
         * Applies the saturate filter.
         * @param  {Array.<Integer>} pixels The pixels of the canvas
         * @param  {Number} value The saturate multiplier
         */
        var adjustSaturate = function(pixels, value) {
            // Luminance constants
            var luR = 0.3086,
                luG = 0.6094,
                luB = 0.0820;

            var c = 1 - value,
                az = c * luR + value,
                bz = c * luG,
                cz = c * luB,
                dz = c * luR,
                ez = c * luG + value,
                fz = c * luB,
                gz = c * luR,
                hz = c * luG,
                iz = c * luB + value;

            for (var i = 0, n = pixels.length; i < n; i += 4) {
                var red = pixels[i],
                    green = pixels[i + 1],
                    blue = pixels[i + 2];

                pixels[i] = (az * red) + (bz * green) + (cz * blue);
                pixels[i + 1] = (dz * red) + (ez * green) + (fz * blue);
                pixels[i + 2] = (gz * red) + (hz * green) + (iz * blue);
            }
        };

        /**
         * Creates a new canvas element with the source image.
         * @return {Element} The new canvas element
         */
        var getInitialCanvas = function() {
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');

            // Resizes the canvas for the DOM
            canvas.width = img.width > 620 ? 620 : img.width;
            canvas.height = img.width > 620 ? img.height / img.width * 620 : img.width;

            context.drawImage(img, 0, 0, canvas.width, canvas.height);

            return canvas;
        };

        return {
            /**
             * The data bound to the view.
             * Represents the values of the filters applied to the image.
             * @type {Object}
             */
            data: {
                brightness: FILTER_DEFAULTS.BRIGHTNESS,
                contrast: FILTER_DEFAULTS.CONTRAST,
                grayscale: FILTER_DEFAULTS.GRAYSCALE,
                hue: FILTER_DEFAULTS.HUE,
                invert: FILTER_DEFAULTS.INVERT,
                saturate: FILTER_DEFAULTS.SATURATE
            },

            /**
             * Initializes the Ractive instance and renders it to the DOM.
             * @param  {Element} parentElement The parent element
             */
            initialize: function(parentElement) {
                this._ractive = new Ractive({
                    append: true,
                    data: this.data,
                    el: parentElement,
                    template: template
                });

                this._canvas = this._ractive.find('#manualCanvas');
                this._context = this._canvas.getContext('2d');

                img = new Image();
                img.onload = function() {
                    var c = getInitialCanvas();
                    this._canvas.width = c.width;
                    this._canvas.height = c.height;
                    this._context.drawImage(img, 0, 0, c.width, c.height);
                }.bind(this);
                img.src = 'app/testImage.jpg';

                this._ractive.observe('brightness', this.filterCanvas.bind(this));
                this._ractive.observe('contrast', this.filterCanvas.bind(this));
                this._ractive.observe('grayscale', this.filterCanvas.bind(this));
                this._ractive.observe('hue', this.filterCanvas.bind(this));
                this._ractive.observe('invert', this.filterCanvas.bind(this));
                this._ractive.observe('saturate', this.filterCanvas.bind(this));

                this._resultImage = this._ractive.find('#manualResult');

                this._ractive.on({
                    captureImage: this.captureImage.bind(this),
                    defaults: this.setToDefault.bind(this)
                });
            },

            /**
             * Applies the new filter state to the preview canvas on the DOM.
             */
            filterCanvas: function() {
                if (!img || !img.width) {
                    // img has not loaded
                    return;
                }

                var canvas = getInitialCanvas();
                var context = canvas.getContext('2d');

                var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                this.applyFilters(imageData.data);

                this._context.putImageData(imageData, 0, 0);
            },

            /**
             * Mutates the pixels of a canvas as specified by its filter state.
             * @param  {Array.<Integer>} pixels The pixels of the canvas
             */
            applyFilters: function(pixels) {
                if (this.data.brightness !== FILTER_DEFAULTS.BRIGHTNESS) {
                    adjustBrightness(pixels, this.data.brightness);
                }

                if (this.data.contrast !== FILTER_DEFAULTS.CONTRAST) {
                    adjustContrast(pixels, this.data.contrast);
                }

                if (this.data.hue !== FILTER_DEFAULTS.HUE) {
                    adjustHue(pixels, this.data.hue);
                }

                if (this.data.grayscale) {
                    adjustGrayscale(pixels);
                }

                if (this.data.invert) {
                    adjustInvert(pixels);
                }

                if (this.data.saturate !== FILTER_DEFAULTS.SATURATE) {
                    adjustSaturate(pixels, this.data.saturate);
                }
            },

            /**
             * Applies the filters in the source image's original resolution.
             */
            captureImage: function() {
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;

                var context = canvas.getContext('2d');
                context.drawImage(img, 0, 0, img.width, img.height);

                var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                this.applyFilters(imageData.data);

                context.putImageData(imageData, 0, 0);
                var dataURL = canvas.toDataURL('image/png');

                this._resultImage.setAttribute('src', dataURL);
            },

            /**
             * Resets the filter state.
             */
            setToDefault: function() {
                this._ractive.set('brightness', FILTER_DEFAULTS.BRIGHTNESS);
                this._ractive.set('contrast', FILTER_DEFAULTS.CONTRAST);
                this._ractive.set('grayscale', FILTER_DEFAULTS.GRAYSCALE);
                this._ractive.set('hue', FILTER_DEFAULTS.HUE);
                this._ractive.set('invert', FILTER_DEFAULTS.INVERT);
                this._ractive.set('saturate', FILTER_DEFAULTS.SATURATE);
            }
        };
    }
);
